from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.dispatcher import FSMContext

from tg_bot.loader import dp
from tg_bot.states.admin import RequiredSubAdd
from tg_bot.filters.admin_filter import IsAdmin
from tg_bot.keyboards.admin.inline.default import cancel_markup
from tg_bot.keyboards.admin.inline.required_sub import continue_markup, \
    verify_markup, required_markup
from tg_bot.db_api.crud.required_subs import get_required_sub, add_required_sub


@dp.callback_query_handler(IsAdmin(), text="req_sub:create")
async def create_ml_handler(call: CallbackQuery):
    await call.message.edit_text("<b>üßë‚Äçüíª –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞: </b>\n"
                                 "<i>–î–ª—è –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> <code>0</code>",
                                 reply_markup=cancel_markup)
    await RequiredSubAdd.channel_id.set()


@dp.message_handler(IsAdmin(), state=RequiredSubAdd.channel_id)
async def channel_id_handler(message: Message, state: FSMContext,
                             session: AsyncSession):
    try:
        channel_id = int(message.text)
    except ValueError:
        return await message.answer("<b>üö´ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞: </b>")

    if await get_required_sub(session, channel_id) is not None:
        await message.answer("<b>üö´ –î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                             "‚ÑπÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ: </b>",
                             reply_markup=cancel_markup)
    else:
        await state.update_data(channel_id=channel_id)

        try:
            _in_channel = await dp.bot.get_chat_member(channel_id, message.bot.id)
        except:
            return await message.answer("<b>‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!\n"
                                        "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
                                        reply_markup=continue_markup)

        if _in_channel.status == "administrator":
            await message.answer("<b>üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: </b>",
                                 reply_markup=cancel_markup)
            await RequiredSubAdd.channel_url.set()
        else:
            await message.answer("<b>‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–ø–µ!\n"
                                 "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
                                 reply_markup=continue_markup)


@dp.callback_query_handler(IsAdmin(), state=RequiredSubAdd.channel_id,
                           text="req_sub:continue")
async def requests_continue_handler(call: CallbackQuery):
    await call.message.edit_text("<b>üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: </b>", reply_markup=cancel_markup)
    await RequiredSubAdd.channel_url.set()


@dp.callback_query_handler(IsAdmin(), state=RequiredSubAdd.channel_id,
                           text="req_sub:refresh")
async def requests_refresh_handler(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("<b>üßë‚Äçüíª –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:</b>", reply_markup=cancel_markup)
    await RequiredSubAdd.channel_id.set()


@dp.message_handler(IsAdmin(), state=RequiredSubAdd.channel_url)
async def channel_url_handler(message: Message, state: FSMContext):
    await state.update_data(channel_url=message.text)
    await message.answer("<b>‚ùî –ù–∞–¥–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: </b>",
                         reply_markup=verify_markup)
    await RequiredSubAdd.verify.set()


@dp.callback_query_handler(IsAdmin(), text_startswith="req_sub:verify:",
                           state=RequiredSubAdd.verify)
async def verify_handler(call: CallbackQuery, state: FSMContext,
                         session: AsyncSession):
    verify = True if call.data[len("req_sub:verify:"):] == "yes" else False
    verify_text = '–î–∞'if verify is True else '–ù–µ—Ç'
    data = await state.get_data()

    await state.finish()
    await add_required_sub(session, data["channel_id"], data["channel_url"], verify)
    await call.message.edit_text("<b>üßë‚Äçüíª –ö–∞–Ω–∞–ª –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                                 f"<b>üÜî –ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞: </b><code>{data['channel_id']}</code>\n"
                                 f"<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: </b>{data['channel_url']}\n"
                                 f"<b>‚ùî –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è: </b><code>{verify_text}</code>",
                                 reply_markup=required_markup)
