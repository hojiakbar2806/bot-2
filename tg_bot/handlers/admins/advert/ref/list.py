from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import CallbackQuery, Message

from tg_bot.loader import dp
from tg_bot.filters.admin_filter import IsAdmin
from tg_bot.keyboards.admin.inline.ref import ref_markup
from tg_bot.db_api.crud.referral import get_referral_urls, get_referral_url
from tg_bot.db_api.crud.users import select_list_users
from tg_bot.db_api.crud.chats import select_list_chats
from tg_bot.utils.functions import count_users, validate_block_bot


@dp.callback_query_handler(IsAdmin(), text="ref_urls:stats")
async def create_ml_handler(call: CallbackQuery, session: AsyncSession):
    count, ref_urls = await get_referral_urls(session)
    text = "<b>üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º: </b>\n" \
           f"<b>‚ÑπÔ∏è –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: </b>{count}\n\n"

    if ref_urls is not None:
        for url in ref_urls:
            text += f"‚ùï<code>{url.name}</code> | üë§ <code>{len(url.users)}</code> | üí≠ <code>{len(url.chats)}</code> | <code>/check {url.name}</code>\n"
    else:
        text += "<b>üö´ –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</b>"

    await call.message.edit_text(text, reply_markup=ref_markup)


@dp.message_handler(IsAdmin(), commands="check")
async def check_ad_handler(message: Message, session: AsyncSession):
    args = message.get_args().strip()

    if args:
        url = await get_referral_url(session, args)
        _users = await select_list_users(session, url.users)
        _chats = await select_list_chats(session, url.chats)

        counts_users = count_users(_users)
        counts_chats = count_users(_chats)
        dead_users, alive_users = await validate_block_bot(dp, url.users)

        user_url = f"https://t.me/{message.bot.config.tgbot.username}?start=ad_{args}"
        chat_url = f"https://t.me/{message.bot.config.tgbot.username}?startgroup=ad_{args}"

        await message.answer(f"<u>üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ {args}: </u>\n\n"
                             f"<b>üë§ –í—Å–µ–≥–æ –ø—Ä–∏—à–ª–æ:</b> <code>{len(url.users)}</code>\n"
                             f"<b>üòä –ñ–∏–≤—ã—Ö:</b> <code>{len(alive_users)}</code>\n"
                             f"<b>‚ò†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏:</b> <code>{len(dead_users)}</code>\n\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –ú–µ—Å—è—Ü:</b> <code>{counts_users[3]}</code>\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –ù–µ–¥–µ–ª—é:</b> <code>{counts_users[0]}</code>\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –î–µ–Ω—å:</b> <code>{counts_users[1]}</code>\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –ß–∞—Å:</b> <code>{counts_users[2]}</code>\n\n"
                             f"<b>üí≠ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤:</b> <code>{len(url.users)}</code>\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –ú–µ—Å—è—Ü:</b> <code>{counts_chats[3]}</code>\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –ù–µ–¥–µ–ª—é:</b> <code>{counts_chats[0]}</code>\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –î–µ–Ω—å:</b> <code>{counts_chats[1]}</code>\n"
                             f"<b>‚ûï –ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –ß–∞—Å:</b> <code>{counts_chats[2]}</code>\n\n"
                             f"<b>üîó –°—Å—ã–ª–∫–∏: </b>\n"
                             f"{user_url}\n"
                             f"{chat_url}"
                             )
    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏!</b>")
