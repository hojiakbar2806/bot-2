from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.dispatcher import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from tg_bot.loader import dp, storage
from tg_bot.filters.admin_filter import IsAdmin
from tg_bot.keyboards.admin.reply import admin_markup
from tg_bot.keyboards.admin.inline.default import cancel_markup
from tg_bot.db_api.crud.requests import add_request, select_request, \
    delete_request, change_accept_request, change_post_request
from tg_bot.states.admin import RequestsAdd, RequestsDelete, RequestsChangePost
from tg_bot.keyboards.admin.inline.settings import requests_markup, continue_markup, \
    accept_markup, delete_markup, paginate_groups_markup, request_markup


@dp.callback_query_handler(IsAdmin(), text="admin:groups_requests")
async def admins_handler(call: CallbackQuery):
    await call.message.edit_text("<u>üóÑ –ó–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö</u>", reply_markup=requests_markup)


@dp.callback_query_handler(IsAdmin(), text="admin:requests:active")
async def groups_active_handler(call: CallbackQuery, session: AsyncSession):
    await call.message.edit_text("<b>üóÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫</b>",
                                 reply_markup=await paginate_groups_markup(session, 0))


@dp.callback_query_handler(IsAdmin(),
                           text=["admin:requests:add", "admin:requests:delete"])
async def requests_add_handler(call: CallbackQuery):
    actions = {
        "admin:requests:add": [
            "<b>üóÑ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫: </b>",
            RequestsAdd.channel_id],
        "admin:requests:delete": [
            "<b>üóÑ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫: </b>",
            RequestsDelete.channel_id]
    }
    await call.message.edit_text(actions[call.data][0],
                                 reply_markup=cancel_markup)
    await actions[call.data][1].set()


@dp.message_handler(IsAdmin(), state=RequestsAdd.channel_id)
async def requests_channel_id_handler(message: Message, state: FSMContext,
                                      session: AsyncSession):
    try:
        channel_id = int(message.text)
    except ValueError:
        return await message.answer("<b>üö´ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞: </b>")

    if await select_request(session, channel_id) is not None:
        await message.answer("<b>üö´ –î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                             "‚ÑπÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ: </b>",
                             reply_markup=cancel_markup)
    else:
        await state.update_data(channel_id=channel_id)

        try:
            _in_channel = await dp.bot.get_chat_member(channel_id, message.bot.id)
        except:
            return await message.answer("<b>‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!\n"
                                        "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
                                        reply_markup=continue_markup)

        if _in_channel.status == "administrator":
            await message.answer("<b>üëÅ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∑–∞—è–≤–∫–µ: </b>\n"
                                 "üóí –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ: <code>–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å</code>\n\n"
                                 "<i>‚ÑπÔ∏è –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π, –∫–Ω–æ–ø–∫–∞–º–∏, –≤–∏–¥–µ–æ, –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∏ —Ç.–¥</i>",
                                 reply_markup=cancel_markup)
            await RequestsAdd.post.set()
        else:
            await message.answer("<b>‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–ø–µ!\n"
                                 "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</b>",
                                 reply_markup=continue_markup)


@dp.callback_query_handler(IsAdmin(), state=RequestsAdd.channel_id,
                           text="requests:continue")
async def requests_continue_handler(call: CallbackQuery):
    await call.message.edit_text(
        "<b>üëÅ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∑–∞—è–≤–∫–µ: </b>\n"
        "üóí –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ: <code>–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å</code>\n\n"
        "<i>‚ÑπÔ∏è –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π, –∫–Ω–æ–ø–∫–∞–º–∏, –≤–∏–¥–µ–æ, –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∏ —Ç.–¥</i>",
        reply_markup=cancel_markup)
    await RequestsAdd.post.set()


@dp.callback_query_handler(IsAdmin(), state=RequestsAdd.channel_id,
                           text="requests:refresh")
async def requests_refresh_handler(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.message.edit_text("<b>üóÑ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫: </b>",
                                 reply_markup=cancel_markup)
    await RequestsAdd.channel_id.set()


@dp.message_handler(IsAdmin(), state=RequestsAdd.post, content_types=ContentType.ANY)
async def requests_post_handler(message: Message, state: FSMContext):
    if message.text == "–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å":
        await state.update_data(post=-1, chat_id=-1, reply_markup={})
    else:
        await state.update_data(post=message.message_id,
                                chat_id=message.chat.id,
                                reply_markup=message.reply_markup.as_json())

    await message.answer("<b>ü´Ç –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞?</b>",
                         reply_markup=accept_markup)
    await RequestsAdd.accept.set()


@dp.callback_query_handler(IsAdmin(), state=RequestsAdd.accept)
async def requests_end_handler(call: CallbackQuery, state: FSMContext,
                               session: AsyncSession):
    data = await state.get_data()
    accept = True if call.data[len("requests:end:"):] == "yes" else False
    accept_text = "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è" if accept is True else "–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è"

    await state.finish()
    await add_request(session, data["channel_id"], data["post"],
                      data["chat_id"],
                      None if not data["reply_markup"] else data["reply_markup"],
                      accept)
    await call.message.edit_text("<b>üóÑ –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–æ–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                                 f"üÜî ID –ö–∞–Ω–∞–ª–∞: <code>{data['channel_id']}</code>\n"
                                 f"ü´Ç –ó–∞—è–≤–∫–∏ <code>{accept_text}</code>\n\n"
                                 f"üëÅ –ü–æ—Å—Ç: ",
                                 reply_markup=requests_markup)

    if data["post"] != -1:
        await call.bot.copy_message(call.message.chat.id,
                                    call.message.chat.id,
                                    data["post"],
                                    reply_markup=data["reply_markup"])


@dp.message_handler(IsAdmin(), state=RequestsDelete.channel_id)
async def delete_request_handler(message: Message, state: FSMContext,
                                 session: AsyncSession):
    _request = await select_request(session, int(message.text))

    if _request is not None:
        await state.update_data(channel_id=message.text)
        await message.answer(f"<b>üóÑ –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª</b> "
                             f"üÜî <code>{message.text}</code>\n",
                             reply_markup=delete_markup)
    else:
        await message.answer("<b>üö´ –ö–∞–Ω–∞–ª –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n"
                             "‚ÑπÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É: ",
                             reply_markup=cancel_markup)


@dp.callback_query_handler(IsAdmin(), text="requests:confirm:delete",
                           state=RequestsDelete.channel_id)
async def confirm_request_handler(call: CallbackQuery, state: FSMContext,
                                  session: AsyncSession):
    data = await state.get_data()

    await state.finish()
    await delete_request(session, int(data["channel_id"]))
    await call.message.answer("<b>üóÑ –ö–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω —Å –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫!</b>",
                              reply_markup=admin_markup)


@dp.callback_query_handler(IsAdmin(), text_startswith="adm:rq:pg:")
async def paginate_request_handler(call: CallbackQuery, session: AsyncSession):
    page: int = int(call.data[len("adm:rq:pg:"):])

    await call.message.edit_text("<b>üóÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫</b>",
                                 reply_markup=await paginate_groups_markup(session, page))


@dp.callback_query_handler(IsAdmin(), text_startswith="adm:req:")
async def active_channel_handler(call: CallbackQuery, session: AsyncSession):
    channel_id: int = int(call.data[len("adm:req:"):])
    request = await select_request(session, channel_id)
    checked_text = "–î–∞" if request.accept_request is True else '–ù–µ—Ç'

    text = "<b>üóÑ –ö–∞–Ω–∞–ª –≤ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫: </b>\n\n" \
           f"<b>üÜî ID:</b> <code>{channel_id}</code>\n" \
           f"<b>ü´Ç –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:</b> <code>{checked_text}</code>"

    await call.message.edit_text(text,
                                 reply_markup=request_markup(channel_id,
                                                             request.accept_request))


@dp.callback_query_handler(IsAdmin(), text_startswith="request:view_post:")
async def view_post_handler(call: CallbackQuery, session: AsyncSession):
    channel_id: int = int(call.data[len("request:view_post:"):])

    request = await select_request(session, channel_id)

    if request.message_id != -1:
        await dp.bot.copy_message(call.message.chat.id,
                                  request.message_chat_id,
                                  request.message_id,
                                  reply_markup=request.reply_markup)
    else:
        await call.answer("üö´ –î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç –ø–æ—Å—Ç–∞!")


@dp.callback_query_handler(IsAdmin(), text_startswith="request:approve:")
async def view_post_handler(call: CallbackQuery, session: AsyncSession):
    action, channel_id = call.data[len("request:approve:"):].split(":")

    new_value: bool = True if action == "on" else False
    text = "*Ô∏è‚É£ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –≤–∫–ª—é—á–µ–Ω–æ" if action == "on" \
        else "‚ùå –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω–æ"

    await change_accept_request(session, int(channel_id), new_value)
    await call.message.edit_reply_markup(reply_markup=request_markup(channel_id, new_value))
    await call.answer(text)


@dp.callback_query_handler(IsAdmin(), text_startswith="request:change_post:")
async def change_post_handler(call: CallbackQuery):
    channel_id: int = int(call.data[len("request:change_post:"):])

    await call.message.answer("<b>üëÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç: </b>\n\n"
                              "<i>‚ÑπÔ∏è –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ç–∫–∞, –∫–Ω–æ–ø–∫–∏, –≤–∏–¥–µ–æ, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç.–¥</i>",
                              reply_markup=cancel_markup)
    await RequestsChangePost.post.set()
    await FSMContext(storage, call.message.chat.id, call.from_user.id)\
        .update_data(channel_id=channel_id)


@dp.message_handler(IsAdmin(), state=RequestsChangePost.post,
                    content_types=ContentType.ANY)
async def new_post_handler(message: Message, state: FSMContext,
                           session: AsyncSession):
    data = await state.get_data()
    reply_markup = None if not message.reply_markup else message.reply_markup

    await state.finish()
    await change_post_request(session, data["channel_id"], message.chat.id,
                              message.message_id, reply_markup)
    await message.answer("üëÅ –ù–æ–≤—ã–π –ø–æ—Å—Ç –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
