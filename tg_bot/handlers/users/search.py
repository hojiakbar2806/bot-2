import asyncio

from aiogram.types import Message, ChatType, ContentType
from aiogram.dispatcher import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from tg_bot.loader import dp, storage
from tg_bot.keyboards.users.inline import premium_markup, buy_premium_markup
from tg_bot.db_api.crud.users import get_user
from tg_bot.utils.settings import parse_settings
from tg_bot.db_api.crud.queue import get_user_in_queue, add_user_in_queue, select_user_from_queue, delete_user_from_queue
from tg_bot.db_api.crud.users import add_total_dialogs, add_total_messages
from tg_bot.db_api.crud.room import get_user_in_room, add_new_room, delete_room
from tg_bot.keyboards.users.reply import menu_markup, cancel_search_markup, delete_markup
from tg_bot.states.users import Chat


@dp.message_handler(commands="search", chat_type=ChatType.PRIVATE)
@dp.message_handler(text="üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", chat_type=ChatType.PRIVATE)
async def search_handler(message: Message, session: AsyncSession):
    queue = await get_user_in_queue(session, message.from_user.id)
    room = await get_user_in_room(session, message.from_user.id)
    text = "<i>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω üêµ\n\n" \
           "/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n" \
           "/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n" \
           "/sharelink - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –¢–ì</i>"
    user_db = await get_user(session, message.from_user.id)

    if queue is None and room is None:
        await add_user_in_queue(session, message.from_user.id, user_db.sex, user_db.opposite_sex, user_db.age)
        await message.answer("üîç –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=cancel_search_markup)

        while True:
            try:
                await asyncio.sleep(1)

                user_in_queue = await get_user_in_queue(session, message.from_user.id)

                if user_in_queue is not None:
                    connected_user = await select_user_from_queue(session, message.from_user.id, user_in_queue.opposite_sex)
                    print(connected_user)

                    if connected_user is not None:
                        connected_user_state = FSMContext(storage, connected_user.user_id, connected_user.user_id)

                        await delete_user_from_queue(session, message.from_user.id)
                        await delete_user_from_queue(session, connected_user.user_id)
                        await add_new_room(session, message.from_user.id, connected_user.user_id)

                        await connected_user_state.set_state(Chat.msg)
                        await connected_user_state.update_data(cust_id=message.from_user.id)

                        await Chat.msg.set()
                        await FSMContext(storage, message.from_user.id, message.from_user.id)\
                            .update_data(cust_id=connected_user.user_id)

                        await dp.bot.send_message(message.from_user.id, text, reply_markup=delete_markup)
                        await dp.bot.send_message(connected_user.user_id, text, reply_markup=delete_markup)

                        await add_total_dialogs(session, message.from_user.id)
                        await add_total_dialogs(session, connected_user.user_id)

                        break
                else:
                    break

            except Exception as e:
                print(e)
                break

    else:
        await message.answer("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ/–æ–±—â–∞–µ—Ç–µ—Å—å!")


@dp.message_handler(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", chat_type=ChatType.PRIVATE)
async def stop_search_handler(message: Message, session: AsyncSession):
    await delete_user_from_queue(session, message.from_user.id)
    await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω üòø", reply_markup=menu_markup)


@dp.message_handler(commands="stop", state=Chat.msg, chat_type=ChatType.PRIVATE)
async def stop_handler(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    room = await get_user_in_room(session, message.from_user.id)
    text = "<i>–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ü§ß\n"\
           "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</i>"

    await state.finish()
    await delete_room(session, room.room_id)
    await FSMContext(storage, data["cust_id"], data["cust_id"]).finish()
    await dp.bot.send_message(data["cust_id"], text, reply_markup=menu_markup)
    await message.answer(text, reply_markup=menu_markup)


@dp.message_handler(commands="next", state=Chat.msg, chat_type=ChatType.PRIVATE)
async def next_handler(message: Message, state: FSMContext, session: AsyncSession):
    await stop_handler(message, state, session)
    await search_handler(message, session)


@dp.message_handler(commands="sharelink", state=Chat.msg)
async def share_link_handler(message: Message, state: FSMContext):
    data = await state.get_data()

    if message.from_user.username is not None:
        await dp.bot.send_message(
            data["cust_id"], f"üì≤ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –≤–∞–º–∏ —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: {message.from_user.mention}")
        await message.answer("üì≤ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É!")
    else:
        await message.answer("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —Ç.–∫ —É –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º!")


@dp.message_handler(state=Chat.msg, content_types=ContentType.ANY)
async def chat_handler(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await dp.bot.copy_message(data["cust_id"], message.chat.id, message.message_id)
    await add_total_messages(session, message.from_user.id)
